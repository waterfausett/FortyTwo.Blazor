@using FortyTwo.Shared.Models

<div class="player-remote @(IsActive ? "active" : "") p-2" @attributes="InputAttributes">
    @if (Player != null)
    {
        <h4 class="ellipsis">
            @if (IsActive)
            {
                <span class="active-dot mr-2"></span>
            }
            @GetPlayerName(Player.Id)
        </h4>

        @if (Bid.HasValue)
        {
            <Chip Context="Components.Models.ContextualClass.Warning">
                <Label>Bid</Label>
                <Badge>@Bid.Value.ToPrettyString()</Badge>
            </Chip>
        }

        @if (Trump.HasValue)
        {
            <Chip>
                <Label>Trump</Label>
                <Badge>@Trump.Value</Badge>
            </Chip>
        }

        @if (Ready == true)
        {
            <div class="ribbon ribbon-top-right"><span>ready</span></div>
        }

        @if (DominoCount != 0)
        {
            <div class="row d-flex justify-content-center" style="font-size: 0.25rem;">
                @for (var i = 0; i < DominoCount; ++i)
                {
                    <Domino Direction="DominoDirection.Horizontal" ShowPlaceHolder="true" Selectable="false"></Domino>
                    if ((i + 1) % 4 == 0)
                    {
                        <div class="domino-spacer d-none d-lg-block"></div>
                    }
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            This spot is empty :(
        </div>
    }
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public bool IsActive { get; set; } = false;

    [Parameter]
    public int DominoCount { get; set; }

    [Parameter]
    public Bid? Bid { get; set; }

    [Parameter]
    public Suit? Trump { get; set; }

    [Parameter]
    public bool? Ready { get; set; }

    [Inject]
    public IClientStore Store { get; set; }

    public string GetPlayerName(string playerId)
        => Store.Users.FirstOrDefault(x => x.Id == playerId)?.DisplayName ?? $"Unknown Player ({playerId})";
}
