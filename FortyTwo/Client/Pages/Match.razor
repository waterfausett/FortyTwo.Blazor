@page "/match/{matchId:guid}"
@attribute [Authorize]
@layout MainLayout

@using System
@using System.Linq
@using CurrieTechnologies.Razor.SweetAlert2
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject IMatchViewModel Model
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

@implements IDisposable

<SpinnerOverlay Visible="Model.IsLoading">
    @if (Model.CurrentGame == null || Model.Player == null)
    {
        <div class="alert alert-danger" role="alert">
            Failed to load game info :(
        </div>
    }
    else
    {
        <div class="game-wrapper">
            <div>
                <h5>
                    @(Model.CurrentGame.Name ?? $"Game {Model.Match.Games.Count + 1}" ?? "Name Unknown")
                    <button type="button" class="btn btn-link" disabled="@Model.IsLoading"
                        @onclick="@(async () => await Model.FetchMatchAsync())">
                        Update
                    </button>
                </h5>
            </div>
            <div>
                <div class="row">
                    @{
                        var playerIndex = Model.Match.Players.FindIndex(x => x.Id == Model.Player.Id);
                        const int numPlayers = 4;
                    }
                    @for (var i = 1; i <= 3; ++i) {
                        var player = Model.Match.Players.ElementAtOrDefault((playerIndex + i) % numPlayers);
                        <div class="col-4">
                            <RemotePlayer Player="player"
                                IsActive="player?.Id == Model.CurrentGame.CurrentPlayerId"
                                DominoCount="Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == player?.Id)?.Dominos ?? 0"></RemotePlayer>
                        </div>
                    }
                </div>
            </div>
            <div class="gameboard">
                @{
                    var teamTricks = Model.CurrentGame.Tricks.Where(x => x.TeamId == Model.Player.TeamId);
                    var opponentTricks = Model.CurrentGame.Tricks.Where(x => x.TeamId != Model.Player.TeamId);
                }
                <div class="opponent-tricks">
                    <div class="mb-1">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@opponentTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                    @foreach (var trick in opponentTricks)
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                </div>
                <div class="current-trick">
                    @foreach (var domino in Model.CurrentGame.CurrentTrick.Dominos)
                    {
                        <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                    }
                </div>
                <div class="player-team-tricks">
                    @foreach (var trick in teamTricks.Reverse())
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                    <div class="mt-1 float-right">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@teamTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                </div>
            </div>

            @if (Model.Player.IsActive && !Model.Player.Bid.HasValue)
            {
                <section class="bidding-section">
                    <SpinnerOverlay Visible="Model.Bidding">
                        <div class="row">
                            <div class="col-12">
                                <p>Select a bid:</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @foreach (Bid bid in Model.BiddingOptions)
                                {
                                    var context = bid switch
                                    {
                                        Bid.Pass => ContextualClass.Warning,
                                        _ => ContextualClass.Info
                                    };
                                    <Chip Context="context" Size="Size.Large" OnSelected="async () => await BidAsync(bid)">
                                        <Label>
                                            @bid.ToPrettyString()
                                        </Label>
                                    </Chip>
                                }
                            </div>
                        </div>
                    </SpinnerOverlay>
                </section>
            }

            @if (Model.CurrentGame.BiddingPlayerId == Model.Player.Id && Model.CurrentGame.Hands.All(x => x.Bid.HasValue) && !Model.CurrentGame.Trump.HasValue)
            {
                <section class="trump-select-section">
                    <SpinnerOverlay Visible="Model.Bidding">
                        <div class="row">
                            <div class="col-12 text-center">
                                @foreach (Suit suit in Enum.GetValues(typeof(Suit)))
                                {
                                    <Chip Context="ContextualClass.Info" Size="Size.Large"><Label>@suit</Label></Chip>
                                }
                            </div>
                        </div>
                    </SpinnerOverlay>
                </section>
            }

            <div class="player">
                <div class="row">
                    <div class="col-12">
                        <hr />

                        <div>
                            <label>Current Player: @Model.CurrentGame.CurrentPlayerId</label>
                        </div>
                        <div>
                            <label>Current Bid: @Model.CurrentGame.Bid.ToPrettyString()</label>
                        </div>
                        <div>
                            <label>Current High Bidder: @Model.CurrentGame.BiddingPlayerId</label>
                        </div>

                        <div class="domino-container">
                            @foreach (var domino in Model.Player.Dominos)
                            {
                                <Domino Instance="domino"
                                    Selectable="Model.Player.IsActive && Model.CurrentGame.Bid.HasValue && Model.CurrentGame.Trump.HasValue"
                                    OnSelected="async (domino) => await MakeMoveAsync(domino)"></Domino>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</SpinnerOverlay>

@code {
    [Parameter]
    public Guid MatchId { get; set; }

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Model.Initialize(MatchId);

        if (Model.Player == null)
        {
            await Model.FetchPlayerAsync();
        }

        if (Model.CurrentGame == null)
        {
            await Model.FetchMatchAsync();
        }

        // TODO: add a visual indicator of connected status

        // TODO: could prolly add most of the connection management to the ViewModel

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        _hubConnection.Closed += async (Exception ex) =>
        {
            await Console.Error.WriteLineAsync(ex.Message);

            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Disconnected",
                Width = "16rem"
            });
        };

        _hubConnection.Reconnected += async (string connectionId) =>
        { 
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Success,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Reconnected",
                Width = "16rem"
            });

            await Model.FetchMatchAsync();
        };

        _hubConnection.On<Player>("OnPlayerAdded", (player) =>
        {
            // TODO: validate

            // TODO: add player

            StateHasChanged();
        });

        _hubConnection.On<FortyTwo.Shared.DTO.Game>("OnGameChanged", async (game) =>
        {
            Model.UpdateGame(game);

            StateHasChanged();

            _ = Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Success,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Game Updated",
                Width = "16rem"
            });
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinGameAsync", MatchId);
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = _hubConnection?.DisposeAsync();
    }

    public async Task BidAsync(Bid bid)
    {
        string errorMessage;

        try
        {
            errorMessage = await Model.BidAsync(bid);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.Error.WriteLine();
        }

        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Html = errorMessage,
                ConfirmButtonText = "Ok",
            });
        }
    }

    public async Task MakeMoveAsync(FortyTwo.Shared.Models.Domino domino)
    {
        string errorMessage;

        try
        {
            errorMessage = await Model.MakeMoveAsync(domino);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.Error.WriteLine();
        }

        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Html = errorMessage,
                ConfirmButtonText = "Ok",
            });
        }
    }
}
