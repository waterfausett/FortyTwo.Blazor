@page "/match/{matchId:guid}"
@attribute [Authorize]
@layout MainLayout
@using BlazorSortableJS
@using BlazorSortableJS.Components
@using FortyTwo.Shared.Models

<style>
    body {
        background-image: url(../img/noise.png);
        background-color: var(--match-background-color);
    }

    .team-scores .stamp {
        position: absolute;
        top: -10px;
        left: -60px;
        opacity: 0.5;
    }
</style>

<SpinnerOverlay Visible="IsLoading">
    @if (CurrentGame == null || Player == null)
    {
        <div class="alert alert-danger" role="alert">
            Failed to load game info :(
        </div>
    }
    else
    {
        <div class="row justify-content-between border-bottom team-scores">
            @{ Model.Scores.TryGetValue(Teams.TeamA, out var teamAScore); }
            @{ Model.Scores.TryGetValue(Teams.TeamB, out var teamBScore); }
            <div class="col-3 offset-1">
                <label><b>Us:</b> <span data-score="@(Player.Team == Teams.TeamA ? teamAScore : teamBScore)"></span></label>
                @if (Model.WinningTeam.HasValue && Model.WinningTeam == Player.Team)
                {
                    <span class="stamp is-approved">Winners!</span>
                }
            </div>
            <div class="col-3">
                <label><b>Them:</b> <span data-score="@(Player.Team == Teams.TeamA ? teamBScore : teamAScore)"></span></label>
                @if (Model.WinningTeam.HasValue && Model.WinningTeam != Player.Team)
                {
                    <span class="stamp is-approved">Winners!</span>
                }
            </div>
        </div>

        <div class="game-wrapper">
            <div>
                <h5>
                    @(CurrentGame.Name ?? $"Game {Model.Games.Count + 1}" ?? "Name Unknown")
                    <button type="button" class="btn btn-link" title="Refresh match" disabled="@IsLoading"
                        @onclick="@(async () => await FetchMatchAsync())">
                        <span class="oi oi-loop-circular" aria-hidden="true"></span>
                    </button>
                </h5>
            </div>
            <div>
                <div class="row">
                    @{
                        const int numPlayers = 4;
                        var playerPosition = Model.Players.FirstOrDefault(x => x.Id == Player.Id)?.Position;
                        var otherPlayers = Model.Players.Where(x => x.Id != Player.Id)
                            .ToDictionary(kv => kv.Position - playerPosition > 0 ? kv.Position - playerPosition : kv.Position - playerPosition + numPlayers);

                        otherPlayers.TryGetValue(1, out var adjustedPlayer1);
                        otherPlayers.TryGetValue(2, out var adjustedPlayer2);
                        otherPlayers.TryGetValue(3, out var adjustedPlayer3);
                    }
                    <div class="col-4">
                        <RemotePlayer Player="adjustedPlayer1"
                            IsActive="adjustedPlayer1?.Id == CurrentGame.CurrentPlayerId"
                            DominoCount="CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer1?.Id)?.Dominos ?? 0"
                            Bid="!CurrentGame.Trump.HasValue || CurrentGame.BiddingPlayerId == adjustedPlayer1?.Id ? CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer1?.Id)?.Bid : null"
                            Trump="CurrentGame.BiddingPlayerId == adjustedPlayer1?.Id ? CurrentGame.Trump : null"
                            Ready="CurrentGame.WinningTeam.HasValue && Model.Players.First(x => x.Id == adjustedPlayer1?.Id).Ready"></RemotePlayer>
                    </div>
                    <div class="col-4">
                        <RemotePlayer Player="adjustedPlayer2" style="background-color: inherit;"
                            IsActive="adjustedPlayer2?.Id == CurrentGame.CurrentPlayerId"
                            DominoCount="CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer2?.Id)?.Dominos ?? 0"
                            Bid="!CurrentGame.Trump.HasValue || CurrentGame.BiddingPlayerId == adjustedPlayer2?.Id ? CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer2?.Id)?.Bid : null"
                            Trump="CurrentGame.BiddingPlayerId == adjustedPlayer2?.Id ? CurrentGame.Trump : null"
                            Ready="CurrentGame.WinningTeam.HasValue && Model.Players.First(x => x.Id == adjustedPlayer2?.Id).Ready"></RemotePlayer>
                    </div>
                    <div class="col-4">
                        <RemotePlayer Player="adjustedPlayer3"
                            IsActive="adjustedPlayer3?.Id == CurrentGame.CurrentPlayerId"
                            DominoCount="CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer3?.Id)?.Dominos ?? 0"
                            Bid="!CurrentGame.Trump.HasValue || CurrentGame.BiddingPlayerId == adjustedPlayer3?.Id? CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer3?.Id)?.Bid : null"
                            Trump="CurrentGame.BiddingPlayerId == adjustedPlayer3?.Id ? CurrentGame.Trump : null"
                            Ready="CurrentGame.WinningTeam.HasValue && Model.Players.First(x => x.Id == adjustedPlayer3?.Id).Ready"></RemotePlayer>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <hr/>
                </div>
            </div>

            <div class="gameboard">
                @{
                    var teamTricks = CurrentGame.Tricks.Where(x => x.Team == Player.Team);
                    var opponentTricks = CurrentGame.Tricks.Where(x => x.Team != Player.Team);
                }
                <div class="player-team-tricks ml-1">
                    @foreach (var trick in teamTricks.Reverse())
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                    <div class="mt-1 float-right">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@teamTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                </div>
                <div class="current-trick p-4 d-flex justify-content-center align-items-center">
                    @foreach (var domino in CurrentGame.CurrentTrick.Dominos)
                    {
                        <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                    }
                </div>
                <div class="opponent-tricks mr-1">
                    <div class="mb-1">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@opponentTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                    @foreach (var trick in opponentTricks)
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <hr/>
                </div>
            </div>

            <div class="player p-2 @(Player.IsActive ? "active" : "")">
                <div>
                    @if (CurrentGame.WinningTeam.HasValue)
                    {
                        if (!Player.Ready)
                        {
                            <button type="button" class="btn btn-success m-2"
                                @onclick="@(async () => await UpdatePlayerAsync(ready: true))">
                                Ready Up!
                            </button>
                        }
                        else
                        {
                            <div class="alert alert-success" role="alert">
                                ✔ Ready <span class="text-muted">waiting on other players&hellip;</span>
                            </div>
                        }
                    }
                </div>

                @if (Player.IsActive && !Player.Bid.HasValue && Player.Dominos?.Any() == true)
                {
                    <section class="bidding-section">
                        <SpinnerOverlay Visible="Bidding">
                            <div class="row">
                                <div class="col-12">
                                    <p>Select a bid:</p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12">
                                    @foreach (Bid bid in BiddingOptions)
                                    {
                                        var context = bid switch
                                        {
                                            Bid.Pass => ContextualClass.Warning,
                                            _ => ContextualClass.Info
                                        };
                                        <Chip Context="context" Size="Size.Large" OnSelected="async () => await BidAsync(bid)">
                                            <Label>
                                                @bid.ToPrettyString()
                                            </Label>
                                        </Chip>
                                    }
                                </div>
                            </div>
                        </SpinnerOverlay>
                    </section>
                }

                @if (CurrentGame.BiddingPlayerId == Player.Id && CurrentGame.Hands.All(x => x.Bid.HasValue) && !CurrentGame.Trump.HasValue)
                {
                    <section class="trump-select-section">
                        <SpinnerOverlay Visible="Bidding">
                            <div class="row">
                                <div class="col-12">
                                    <p>Select a trump:</p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12 text-center">
                                    @foreach (Suit suit in Enum.GetValues(typeof(Suit)))
                                    {
                                        if (suit == Suit.None && CurrentGame.Bid < Bid.FourtyTwo && CurrentGame.Bid != Bid.Plunge) continue;
                                        <Chip Context="ContextualClass.Info" Size="Size.Large" OnSelected="async () => await SelectTrumpAsync(suit)"><Label>@suit.ToPrettyString()</Label></Chip>
                                    }
                                </div>
                            </div>
                        </SpinnerOverlay>
                    </section>
                }

                <div class="row">
                    <div class="col-12">
                        @if (!CurrentGame.Trump.HasValue || CurrentGame.BiddingPlayerId == Player.Id)
                        {
                            @if (Player.Bid.HasValue)
                            {
                                <Chip Context="Components.Models.ContextualClass.Warning">
                                    <Label>Bid</Label>
                                    <Badge>@Player.Bid.Value.ToPrettyString()</Badge>
                                </Chip>
                            }
                            @if (CurrentGame.Trump.HasValue)
                            {
                                <Chip>
                                    <Label>Trump</Label>
                                    <Badge>@CurrentGame.Trump.Value</Badge>
                                </Chip>
                            }
                        }

                        <div class="domino-container">
                            <SortGroup Items="@Player.Dominos" Class="sortable-horizontal d-flex flex-wrap justify-content-center m-0 p-0" IsDiv="true" TemplateClass="sortable-domino" @ref="MyGroup" TItem="FortyTwo.Shared.Models.Domino" OnSort="OnSort">
                                <Template Context="domino">
                                    <Domino Instance="@domino.Data"
                                        Selectable="!MakingMove && Player.IsActive && CurrentGame.Bid.HasValue && CurrentGame.Trump.HasValue"
                                        OnSelected="async (domino) => await MakeMoveAsync(domino)"
                                        Preselected="domino.Data.Equals(PreselectedMove)"
                                        OnDblClick="async (domino) => await PreselectAsync(domino)"></Domino>
                                    <!-- TODO: this ain't workin' right now -->
                                    @if (domino.Data.Order % 4 == 0)
                                    {
                                        <div class="domino-spacer d-none d-lg-block"></div> 
                                    }
                                </Template>
                            </SortGroup>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</SpinnerOverlay>
