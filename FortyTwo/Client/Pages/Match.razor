@page "/match/{matchId:guid}"
@attribute [Authorize]
@layout MainLayout

@using System
@using System.Linq
@using CurrieTechnologies.Razor.SweetAlert2
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Extensions
@using FortyTwo.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject IMatchViewModel Model
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager

@implements IDisposable

<SpinnerOverlay Visible="Model.IsLoading">
    @if (Model.CurrentGame == null || Model.Player == null)
    {
        <div class="alert alert-danger" role="alert">
            Failed to load game info :(
        </div>
    }
    else
    {
        <div class="row justify-content-between border-bottom">
            @{ Model.Match.Scores.TryGetValue(Teams.TeamA, out var teamAScore); }
            @{ Model.Match.Scores.TryGetValue(Teams.TeamB, out var teamBScore); }
            <div class="col-3 offset-1"><label><b>Us:</b> <span data-score="@(Model.Player.Team == Teams.TeamA ? teamAScore : teamBScore)"></span></label></div>
            <div class="col-3"><label><b>Them:</b> <span data-score="@(Model.Player.Team == Teams.TeamA ? teamBScore : teamAScore)"></span></label></div>
        </div>

        <div class="game-wrapper">
            <div>
                <h5>
                    @(Model.CurrentGame.Name ?? $"Game {Model.Match.Games.Count + 1}" ?? "Name Unknown")
                    <button type="button" class="btn btn-link" title="Refresh match" disabled="@Model.IsLoading"
                        @onclick="@(async () => await Model.FetchMatchAsync())">
                        <span class="oi oi-loop-circular" aria-hidden="true"></span>
                    </button>
                </h5>
            </div>
            <div>
                <div class="row">
                    @{
                        const int numPlayers = 4;
                        var playerPosition = Model.Match.Players.FirstOrDefault(x => x.Id == Model.Player.Id)?.Position;
                        var otherPlayers = Model.Match.Players.Where(x => x.Id != Model.Player.Id)
                            .ToDictionary(kv => kv.Position - playerPosition > 0 ? kv.Position - playerPosition : kv.Position - playerPosition + numPlayers);

                        otherPlayers.TryGetValue(1, out var adjustedPlayer1);
                        otherPlayers.TryGetValue(2, out var adjustedPlayer2);
                        otherPlayers.TryGetValue(3, out var adjustedPlayer3);
                    }
                    <div class="col-4">
                        <RemotePlayer Player="adjustedPlayer1"
                            IsActive="adjustedPlayer1?.Id == Model.CurrentGame.CurrentPlayerId"
                            DominoCount="Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer1?.Id)?.Dominos ?? 0"
                            Bid="!Model.CurrentGame.Trump.HasValue || Model.CurrentGame.BiddingPlayerId == adjustedPlayer1?.Id ? Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer1?.Id)?.Bid : null"
                            Trump="Model.CurrentGame.BiddingPlayerId == adjustedPlayer1?.Id ? Model.CurrentGame.Trump : null"
                            Ready="Model.CurrentGame.WinningTeam.HasValue && Model.Match.Players.First(x => x.Id == adjustedPlayer1?.Id).Ready"></RemotePlayer>
                    </div>
                    <div class="col-4" style="border-left: solid 1px lightgrey; border-right: solid 1px lightgrey;">
                        <RemotePlayer Player="adjustedPlayer2"
                            IsActive="adjustedPlayer2?.Id == Model.CurrentGame.CurrentPlayerId"
                            DominoCount="Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer2?.Id)?.Dominos ?? 0"
                            Bid="!Model.CurrentGame.Trump.HasValue || Model.CurrentGame.BiddingPlayerId == adjustedPlayer2?.Id ? Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer2?.Id)?.Bid : null"
                            Trump="Model.CurrentGame.BiddingPlayerId == adjustedPlayer2?.Id ? Model.CurrentGame.Trump : null"
                            Ready="Model.CurrentGame.WinningTeam.HasValue && Model.Match.Players.First(x => x.Id == adjustedPlayer2?.Id).Ready"></RemotePlayer>
                    </div>
                    <div class="col-4">
                        <RemotePlayer Player="adjustedPlayer3"
                            IsActive="adjustedPlayer3?.Id == Model.CurrentGame.CurrentPlayerId"
                            DominoCount="Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer3?.Id)?.Dominos ?? 0"
                            Bid="!Model.CurrentGame.Trump.HasValue || Model.CurrentGame.BiddingPlayerId == adjustedPlayer3?.Id? Model.CurrentGame.Hands.FirstOrDefault(p => p.PlayerId == adjustedPlayer3?.Id)?.Bid : null"
                            Trump="Model.CurrentGame.BiddingPlayerId == adjustedPlayer3?.Id ? Model.CurrentGame.Trump : null"
                            Ready="Model.CurrentGame.WinningTeam.HasValue && Model.Match.Players.First(x => x.Id == adjustedPlayer3?.Id).Ready"></RemotePlayer>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <hr/>
                </div>
            </div>

            <div class="gameboard">
                @{
                    var teamTricks = Model.CurrentGame.Tricks.Where(x => x.Team == Model.Player.Team);
                    var opponentTricks = Model.CurrentGame.Tricks.Where(x => x.Team != Model.Player.Team);
                }
                <div class="player-team-tricks ml-1">
                    @foreach (var trick in teamTricks.Reverse())
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                    <div class="mt-1 float-right">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@teamTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                </div>
                <div class="current-trick p-4 d-flex justify-content-center align-items-center">
                    @foreach (var domino in Model.CurrentGame.CurrentTrick.Dominos)
                    {
                        <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                    }
                </div>
                <div class="opponent-tricks mr-1">
                    <div class="mb-1">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@opponentTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                    @foreach (var trick in opponentTricks)
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                </div>
            </div>

            @if (Model.Player.IsActive && !Model.Player.Bid.HasValue)
            {
                <section class="bidding-section">
                    <SpinnerOverlay Visible="Model.Bidding">
                        <div class="row">
                            <div class="col-12">
                                <p>Select a bid:</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @foreach (Bid bid in Model.BiddingOptions)
                                {
                                    var context = bid switch
                                    {
                                        Bid.Pass => ContextualClass.Warning,
                                        _ => ContextualClass.Info
                                    };
                                    <Chip Context="context" Size="Size.Large" OnSelected="async () => await BidAsync(bid)">
                                        <Label>
                                            @bid.ToPrettyString()
                                        </Label>
                                    </Chip>
                                }
                            </div>
                        </div>
                    </SpinnerOverlay>
                </section>
            }

            @if (Model.CurrentGame.BiddingPlayerId == Model.Player.Id && Model.CurrentGame.Hands.All(x => x.Bid.HasValue) && !Model.CurrentGame.Trump.HasValue)
            {
                <section class="trump-select-section">
                    <SpinnerOverlay Visible="Model.Bidding">
                        <div class="row">
                            <div class="col-12 text-center">
                                @foreach (Suit suit in Enum.GetValues(typeof(Suit)))
                                {
                                    <Chip Context="ContextualClass.Info" Size="Size.Large" OnSelected="async () => await SelectTrumpAsync(suit)"><Label>@suit</Label></Chip>
                                }
                            </div>
                        </div>
                    </SpinnerOverlay>
                </section>
            }

            <div class="player">
                <div>
                    @if (Model.CurrentGame.WinningTeam.HasValue)
                    {
                        if (!Model.Player.Ready)
                        {
                            <button type="button" class="btn btn-success"
                                @onclick="@(async () => await UpdatePlayerAsync(ready: true))">
                                Ready Up!
                            </button>
                        }
                        else
                        {
                            <div class="alert alert-success" role="alert">
                                ✔ Ready <span class="text-muted">waiting on other players&hellip;</span>
                            </div>
                        }
                    }
                </div>
                <div class="row">
                    <div class="col-12">
                        <hr />

                        @if (!Model.CurrentGame.Trump.HasValue || Model.CurrentGame.BiddingPlayerId == Model.Player.Id)
                        {
                            @if (Model.Player.Bid.HasValue)
                            {
                                <Chip Context="Components.Models.ContextualClass.Warning">
                                    <Label>Bid</Label>
                                    <Badge>@Model.Player.Bid.Value.ToPrettyString()</Badge>
                                </Chip>
                            }
                            @if (Model.CurrentGame.Trump.HasValue)
                            {
                                <Chip>
                                    <Label>Trump</Label>
                                    <Badge>@Model.CurrentGame.Trump.Value</Badge>
                                </Chip>
                            }
                        }

                        <div class="domino-container">
                            @{ var playerDominos = Model.Player.Dominos ?? new List<FortyTwo.Shared.Models.Domino>(); }
                            @for (var i = 0; i < playerDominos.Count; ++i)
                            {
                                <Domino Instance="playerDominos[i]"
                                    Selectable="!Model.MakingMove && Model.Player.IsActive && Model.CurrentGame.Bid.HasValue && Model.CurrentGame.Trump.HasValue"
                                    OnSelected="async (domino) => await MakeMoveAsync(domino)"></Domino>
                                if ((i + 1) % 4 == 0)
                                {
                                    <div class="domino-spacer d-none d-lg-block"></div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</SpinnerOverlay>

@code {
    [Parameter]
    public Guid MatchId { get; set; }

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Model.Initialize(MatchId);

        if (Model.Player == null)
        {
            await Model.FetchPlayerAsync();
        }

        if (Model.CurrentGame == null)
        {
            await Model.FetchMatchAsync();
        }

        // TODO: add a visual indicator of the match being over

        // TODO: add a visual indicator of connected status

        // TODO: could prolly add most of the connection management to the ViewModel

        // TODO: handle signalr connection exceptions

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        _hubConnection.Closed += async (Exception ex) =>
        {
            await Console.Error.WriteLineAsync(ex.Message);

            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Disconnected",
                Width = "16rem"
            });
        };

        _hubConnection.Reconnected += async (string connectionId) =>
        { 
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Success,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Reconnected",
                Width = "16rem"
            });

            await Model.FetchMatchAsync();
        };

        _hubConnection.On<Player>("OnPlayerAdded", (player) =>
        {
            // TODO: validate

            // TODO: add player

            StateHasChanged();
        });

        _hubConnection.On<FortyTwo.Shared.DTO.Match>("OnMatchChanged", async (match) =>
        {
            var newGameStarting = Model.CurrentGame.Id != match.CurrentGame.Id;

            await Model.UpdateMatch(match);
            await Model.FetchPlayerAsync();

            StateHasChanged();

            if (newGameStarting)
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Info,
                    Title = "The next game has started",
                    ConfirmButtonText = "Ok",
                });
            }
            else if (match.WinningTeam.HasValue)
            {
                var alertOptions = new SweetAlertOptions
                {
                    ShowConfirmButton = true,
                    ConfirmButtonText = "OK",
                    FocusConfirm = true,
                    ShowCancelButton = false,
                    ShowCloseButton = false,
                };

                var biddingTeam = (int)Model.Match.Players.First(x => x.Id == Model.CurrentGame.BiddingPlayerId).Position % 2 == 0
                    ? Teams.TeamA
                    : Teams.TeamB;

                if (Model.Player.Team == match.WinningTeam)
                {
                    alertOptions.Icon = SweetAlertIcon.Success;
                    alertOptions.Title = "Victory!";
                    alertOptions.Text = "Your team won the match! 🥳🎈";
                }
                else
                {
                    alertOptions.Icon = SweetAlertIcon.Error;
                    alertOptions.Title = "Game Over!";
                    alertOptions.Text = "The other team won the match 😭...";
                }

                await Swal.FireAsync(alertOptions);
            }
        });

        _hubConnection.On<FortyTwo.Shared.DTO.Game>("OnGameChanged", async (game) =>
        {
            if (Model.CurrentGame.CurrentTrick.Dominos.Count(x => x != null) == 3 && game.CurrentTrick.Dominos.All(x => x == null))
            {
                Model.CurrentGame.CurrentTrick.AddDomino(game.Tricks.Last().Dominos.Last(), Model.CurrentGame.Trump.Value);

                StateHasChanged();

                await Task.Delay(1000);
            }

            await Model.UpdateGame(game);

            StateHasChanged();

            await ShowNotificationIfGameOverAsync(game);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("JoinGameAsync", MatchId);
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = _hubConnection?.DisposeAsync();
    }

    public async Task ShowNotificationIfGameOverAsync(FortyTwo.Shared.DTO.Game game)
    {
        if (!game.WinningTeam.HasValue) return;
        
        var alertOptions = new SweetAlertOptions
        {
            ShowConfirmButton = true,
            ConfirmButtonText = "OK",
            FocusConfirm = true,
            ShowCancelButton = false,
            ShowCloseButton = false,
        };

        var biddingTeam = (int)Model.Match.Players.First(x => x.Id == Model.CurrentGame.BiddingPlayerId).Position % 2 == 0
            ? Teams.TeamA
            : Teams.TeamB;

        if (Model.Player.Team == game.WinningTeam)
        {
            alertOptions.Icon = SweetAlertIcon.Success;
            alertOptions.Title = "Victory!";
            alertOptions.Text = biddingTeam == Model.Player.Team
                ? "Your team made their bid! 🥳🎈"
                : "You set the other team! 🎉";
        }
        else
        {
            alertOptions.Icon = SweetAlertIcon.Error;
            alertOptions.Title = "Game Over!";
            alertOptions.Text = biddingTeam == Model.Player.Team
                ? "The other team set you 😡"
                : "The other team made their bid 😒";
        }

        await Swal.FireAsync(alertOptions);
    }

    public async Task BidAsync(Bid bid)
    {
        var error = await Model.BidAsync(bid);

        if (error != null)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Title = error.Title,
                Html = error.Detail.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }

    public async Task UpdatePlayerAsync(bool ready)
    {
        var error = await Model.UpdatePlayerAsync(ready);

        if (error != null)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Title = error.Title,
                Html = error.Detail.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }


    public async Task SelectTrumpAsync(Suit suit)
    {
        var error = await Model.SelectTrumpAsync(suit);

        if (error != null)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Title = error.Title,
                Html = error.Detail.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }

    public async Task MakeMoveAsync(FortyTwo.Shared.Models.Domino domino)
    {
        var error = await Model.MakeMoveAsync(domino);

        if (error != null)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Title = error.Title,
                Html = error.Detail.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }
}
