@page "/"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Models
@using FortyTwo.Shared.Extensions

<div>
    <h3>
        Matches
        <button type="button" class="btn btn-link" title="Refresh list" disabled="@IsLoading"
            @onclick="@(async () => await FetchMatchesAsync())">
            <span class="oi oi-loop-circular" aria-hidden="true"></span>
        </button>
        <button type="button" class="btn btn-link pull-right" disabled="@IsCreating"
            @onclick="@(async () => await CreateMatchAsync())">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
    </h3>

    <hr />

    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-toggle="tab" role="tab"
                @onclick="@(async () => await FetchMatchesAsync(MatchFilter.Active))">Active</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="tab" role="tab"
                @onclick="@(async () => await FetchMatchesAsync(MatchFilter.Completed))">Completed</a>
        </li>
    </ul>

    <SpinnerOverlay Visible="IsLoading">
        <div>
            @if (Matches?.Any() == true)
            {
                @foreach (var match in Matches)
                {
                    <div class="card mb-2">
                        @if (match.Players.Count == 4)
                        {
                            <h5 class="card-header"><a href="/match/@match.Id" class="btn btn-sm btn-link">View</a></h5>
                        }
                        else
                        {
                            <h5 class="card-header"><span class="text-muted">waiting for more players&hellip;</span></h5>
                        }
                        <div class="card-body p-2">
                            <ul class="list-group list-group-flush">

                                @* TODO: make a component for this *@

                                @{ match.Scores.TryGetValue(Teams.TeamA, out var teamAScore); }
                                <li class="list-group-item p-0 @(match.WinningTeam == Teams.TeamA ? "match-winner" : "")">
                                    <h5 class="card-title m-2 d-flex justify-content-between">
                                        <div>
                                            @if (match.Teams[Teams.TeamA].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                            {
                                                <span class="active-dot mr-2"></span>
                                            }
                                            @string.Join(" & ", match.Teams[Teams.TeamA].OrderBy(x => x.Position).Select(x => UserService.GetUserName(x.Id)))
                                        </div>
                                        <div>
                                            <span><label>Score: <span data-score="@teamAScore"></span></label></span>
                                        </div>
                                    </h5>
                                    <div class="d-flex justify-content-between">
                                        <div class="m-2">
                                            <Chip Context="Components.Models.ContextualClass.Info">
                                                <Label>Points</Label>
                                                <Badge>@match.CurrentGame.Tricks.Where(x => x.Team == Teams.TeamA).Sum(x => x.Value)</Badge>
                                            </Chip>

                                            @if (match.Teams[Teams.TeamA].Any(x => x.Id == match.CurrentGame.BiddingPlayerId))
                                            {
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(match.CurrentGame.Bid.HasValue ? $"{match.CurrentGame.Bid.ToPrettyString()}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(match.CurrentGame.Trump.HasValue ? $"{match.CurrentGame.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                        <div>
                                            @if (match.Teams[Teams.TeamA].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamA))">Join Game</button>
                                            }
                                        </div>
                                    </div>
                                </li>

                                @{ match.Scores.TryGetValue(Teams.TeamB, out var teamBScore); }
                                <li class="list-group-item p-0 @(match.WinningTeam == Teams.TeamB ? "match-winner" : "")">
                                    <h5 class="card-title m-2 d-flex justify-content-between">
                                        <div>
                                            @if (match.Teams[Teams.TeamB].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                            {
                                                <span class="active-dot mr-2"></span>
                                            }
                                            @string.Join(" & ", match.Teams[Teams.TeamB].OrderBy(x => x.Position).Select(x => UserService.GetUserName(x.Id)))
                                        </div>
                                        <div>
                                            <span><label>Score: <span data-score="@teamBScore"></span></label></span>
                                        </div>
                                    </h5>
                                    <div class="d-flex justify-content-between">
                                        <div class="m-2">
                                            <Chip Context="Components.Models.ContextualClass.Info">
                                                <Label>Points</Label>
                                                <Badge>@match.CurrentGame.Tricks.Where(x => x.Team == Teams.TeamB).Sum(x => x.Value)</Badge>
                                            </Chip>

                                            @if (match.Teams[Teams.TeamB].Any(x => x.Id == match.CurrentGame.BiddingPlayerId))
                                            {
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(match.CurrentGame.Bid.HasValue ? $"{match.CurrentGame.Bid.ToPrettyString()}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(match.CurrentGame.Trump.HasValue ? $"{match.CurrentGame.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                        <div>
                                            @if (match.Teams[Teams.TeamB].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamB))">Join Game</button>
                                            }
                                        </div>
                                    </div>
                                </li>

                            </ul>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>
