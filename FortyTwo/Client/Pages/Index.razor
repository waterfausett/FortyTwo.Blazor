@page "/"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Models
@inject IMatchesViewModel Model

<div>
    <h3>
        Matches
        <button type="button" class="btn btn-link" disabled="@Model.IsLoading"
            @onclick="@(async () => await Model.FetchMatchesAsync())">
            Update
        </button>
        <button type="button" class="btn btn-link pull-right" disabled="@Model.IsCreating"
            @onclick="@(async () => await Model.CreateMatchAsync())">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
    </h3>

    <hr />

    <SpinnerOverlay Visible="Model.IsLoading">
        <div>
            @if (Model.Matches?.Any() == true)
            {
                @foreach (var match in Model.Matches)
                {
                    <div class="card">
                        <h5 class="card-header">@match.Id <a href="/match/@match.Id" class="btn btn-sm btn-link">View</a></h5>
                        <div class="card-body p-2">
                            <ul class="list-group list-group-flush">
                                @foreach (var team in match.Players.GroupBy(x => x.TeamId))
                                {
                                    match.Scores.TryGetValue(team.Key, out var teamScore);
                                    <li class="list-group-item p-0 @(match.WinningTeamId == team.Key ? "match-winner" : "")">
                                        <h5 class="card-title m-2">
                                            @string.Join(" & ", team.Select(x => Model.GetPlayerName(x.Id)))
                                            <span class="pull-right ml-3"><label>Score: @teamScore</label></span>
                                            @if (team.Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                            {
                                                <span class="active-dot"></span>
                                            }
                                        </h5>
                                        <div class="m-2">
                                            <Chip Context="Components.Models.ContextualClass.Info">
                                                <Label>Points</Label>
                                                <Badge>@match.CurrentGame.Tricks.Where(x => x.TeamId == team.Key).Sum(x => x.Value)</Badge>
                                            </Chip>

                                            @if (team.Any(x => x.Id == match.CurrentGame.BiddingPlayerId))
                                            {
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(match.CurrentGame.Bid.HasValue ? $"{match.CurrentGame.Bid.ToPrettyString()}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(match.CurrentGame.Trump.HasValue ? $"{match.CurrentGame.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (Model.Matches == null || !Model.Matches.Any())
        {
            await Model.FetchMatchesAsync();
        }
    }
}
