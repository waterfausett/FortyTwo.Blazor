@page "/"
@attribute [Authorize]
@layout MainLayout
@using CurrieTechnologies.Razor.SweetAlert2
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Models
@using FortyTwo.Shared.Extensions
@inject SweetAlertService Swal
@inject IMatchesViewModel Model

<div>
    <h3>
        Matches
        <button type="button" class="btn btn-link" title="Refresh list" disabled="@Model.IsLoading"
            @onclick="@(async () => await Model.FetchMatchesAsync())">
            <span class="oi oi-loop-circular" aria-hidden="true"></span>
        </button>
        <button type="button" class="btn btn-link pull-right" disabled="@true"
            @onclick="@(async () => await CreateMatchAsync())">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
    </h3>

    <hr />

    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-toggle="tab" role="tab"
                @onclick="@(async () => {
                    await Model.FetchMatchesAsync(MatchFilter.Active);
                })">Active</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="tab" role="tab"
                @onclick="@(async () => {
                    await Model.FetchMatchesAsync(MatchFilter.Completed);
                })">Completed</a>
        </li>
    </ul>

    <SpinnerOverlay Visible="Model.IsLoading">
        <div>
            @if (Model.Matches?.Any() == true)
            {
                @foreach (var match in Model.Matches)
                {
                    <div class="card">
                        <h5 class="card-header">@match.Id <a href="/match/@match.Id" class="btn btn-sm btn-link">View</a></h5>
                        <div class="card-body p-2">
                            <ul class="list-group list-group-flush">

                                @* TODO: make a component for this *@

                                @match.Scores.TryGetValue(Teams.TeamA, out var teamAScore);
                                <li class="list-group-item p-0 @(match.WinningTeam == Teams.TeamA ? "match-winner" : "")">
                                    <h5 class="card-title m-2">
                                        @string.Join(" & ", match.Teams[Teams.TeamA].Select(x => Model.GetPlayerName(x.Id)))
                                        <span class="pull-right ml-3"><label>Score: @teamAScore</label></span>
                                        @if (match.Teams[Teams.TeamA].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                        {
                                            <span class="active-dot"></span>
                                        }
                                    </h5>
                                    <div class="d-flex justify-content-between">
                                        <div class="m-2">
                                            <Chip Context="Components.Models.ContextualClass.Info">
                                                <Label>Points</Label>
                                                <Badge>@match.CurrentGame.Tricks.Where(x => x.Team == Teams.TeamA).Sum(x => x.Value)</Badge>
                                            </Chip>

                                            @if (match.Teams[Teams.TeamA].Any(x => x.Id == match.CurrentGame.BiddingPlayerId))
                                            {
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(match.CurrentGame.Bid.HasValue ? $"{match.CurrentGame.Bid.ToPrettyString()}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(match.CurrentGame.Trump.HasValue ? $"{match.CurrentGame.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                        <div>
                                            @if (match.Teams[Teams.TeamA].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamA))">Join Game</button>
                                            }
                                        </div>
                                    </div>
                                </li>

                                @match.Scores.TryGetValue(Teams.TeamB, out var teamBScore);
                                <li class="list-group-item p-0 @(match.WinningTeam == Teams.TeamB ? "match-winner" : "")">
                                    <h5 class="card-title m-2">
                                        @string.Join(" & ", match.Teams[Teams.TeamB].Select(x => Model.GetPlayerName(x.Id)))
                                        <span class="pull-right ml-3"><label>Score: @teamBScore</label></span>
                                        @if (match.Teams[Teams.TeamB].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                        {
                                            <span class="active-dot"></span>
                                        }
                                    </h5>
                                    <div class="d-flex justify-content-between">
                                        <div class="m-2">
                                            <Chip Context="Components.Models.ContextualClass.Info">
                                                <Label>Points</Label>
                                                <Badge>@match.CurrentGame.Tricks.Where(x => x.Team == Teams.TeamB).Sum(x => x.Value)</Badge>
                                            </Chip>

                                            @if (match.Teams[Teams.TeamB].Any(x => x.Id == match.CurrentGame.BiddingPlayerId))
                                            {
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(match.CurrentGame.Bid.HasValue ? $"{match.CurrentGame.Bid.ToPrettyString()}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(match.CurrentGame.Trump.HasValue ? $"{match.CurrentGame.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                        <div>
                                            @if (match.Teams[Teams.TeamB].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamB))">Join Game</button>
                                            }
                                        </div>
                                    </div>
                                </li>

                            </ul>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private System.Security.Claims.ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        _user = authState.User;

        if (Model.Matches == null || !Model.Matches.Any())
        {
            await Model.FetchMatchesAsync();
        }
    }

    private async Task CreateMatchAsync()
    {
        string errorMessage;

        try
        {
            errorMessage = await Model.CreateMatchAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.Error.WriteLine(errorMessage);
        }

        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Html = errorMessage.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }

    private async Task JoinMatchAsync(Guid matchId, Teams team)
    {
        string errorMessage;

        try
        {
            errorMessage = await Model.JoinMatchAsync(matchId, team);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.Error.WriteLine(errorMessage);
        }

        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Html = errorMessage.Truncate(250),
                ConfirmButtonText = "Ok",
            });
        }
    }
}
