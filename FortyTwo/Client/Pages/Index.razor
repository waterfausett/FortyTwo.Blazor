@page "/"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@using FortyTwo.Shared.Models
@using FortyTwo.Shared.Extensions

<div>
    <h3>
        Matches
        <button type="button" class="btn btn-link" title="Refresh list" disabled="@IsLoading"
            @onclick="@(async () => await FetchMatchesAsync())">
            <span class="oi oi-loop-circular" aria-hidden="true"></span>
        </button>
        <button type="button" class="btn btn-link pull-right" disabled="@IsCreating"
            @onclick="@(async () => await CreateMatchAsync())">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
    </h3>

    <hr />

    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-toggle="tab" role="tab"
                @onclick="@(async () => await FetchMatchesAsync(MatchFilter.Active))">Active</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="tab" role="tab"
                @onclick="@(async () => await FetchMatchesAsync(MatchFilter.Completed))">Completed</a>
        </li>
    </ul>

    <SpinnerOverlay Visible="IsLoading">
        <div>
            @if (Matches?.Any() == true)
            {
                <table class="table table-hover table-responsive-sm">
                    <thead>
                        <th scope="col"></th>
                        <th scope="col">Team</th>
                        <th scope="col">Team</th>
                    </thead>
                    <tbody>
                        @foreach (var match in Matches)
                        {
                            <tr>
                                <th scope="row">
                                    @if (match.Players.Count != 4)
                                    {
                                        <button type="button" class="btn btn-sm btn-link" title="waiting for more players&hellip;" disabled>view</button>
                                    }
                                    else
                                    {
                                        <a href="/match/@match.Id" class="btn btn-sm btn-link">view</a>
                                    }
                                </th>
                                <td>
                                    <div class="d-flex">
                                        <div class="ellipsis">
                                            @if (match.Teams[Teams.TeamA].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                            {
                                                <span class="active-dot align-middle mr-2"></span>
                                            }
                                            @string.Join(" & ", match.Teams[Teams.TeamA].OrderBy(x => x.Position).Select(x => UserService.GetUserName(x.Id)))
                                        </div>
                                        @{ match.Scores.TryGetValue(Teams.TeamA, out var teamAScore); }
                                        @if (teamAScore > 0)
                                        {
                                            <div class="ml-2">
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label><span data-score="@teamAScore"></span></Label>
                                                </Chip>
                                            </div>
                                        }
                                        <div class="ml-auto">
                                            @if (match.Teams[Teams.TeamA].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamA))">Join</button>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex">
                                        <div class="ellipsis">
                                            @if (match.Teams[Teams.TeamB].Any(x => x.Id == match.CurrentGame.CurrentPlayerId))
                                            {
                                                <span class="active-dot align-middle mr-2"></span>
                                            }
                                            @string.Join(" & ", match.Teams[Teams.TeamB].OrderBy(x => x.Position).Select(x => UserService.GetUserName(x.Id)))
                                        </div>
                                        @{ match.Scores.TryGetValue(Teams.TeamB, out var teamBScore); }
                                        @if (teamBScore > 0)
                                        {
                                            <div class="ml-2">
                                                <Chip Context="Components.Models.ContextualClass.Warning">
                                                    <Label><span data-score="@teamBScore"></span></Label>
                                                </Chip>
                                            </div>
                                        }
                                        <div class="ml-auto">
                                            @if (match.Teams[Teams.TeamB].Count() < 2 && match.Teams.SelectMany(x => x.Value).All(x => x.Id != _user.GetUserId()))
                                            {
                                                <button type="button" class="btn btn-primary"
                                                    @onclick="@(async () => await JoinMatchAsync(match.Id, Teams.TeamB))">Join</button>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>
