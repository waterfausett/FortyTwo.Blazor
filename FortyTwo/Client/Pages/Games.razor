@page "/games"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@inject IGamesViewModel Model

<div>
    <h3>
        Games
        <button type="button" class="btn btn-link" @onclick="@(async () => await Model.FetchGamesAsync())">Update</button>
    </h3>

    <hr />

    <SpinnerOverlay Visible="Model.IsLoading">
        <div>
            @if (Model.Games?.Any() == true)
            {
                @foreach (var game in Model.Games)
                {
                    <div class="card">
                        <h5 class="card-header">@game.Name <a href="/game/@game.Id" class="btn btn-sm btn-link">View</a></h5>
                        <div class="card-body p-2">
                            <ul class="list-group list-group-flush">
                                @foreach (var team in game.Players.GroupBy(x => x.TeamId))
                                {
                                    <li class="list-group-item p-0">
                                        <h5 class="card-title m-2">
                                            @string.Join(" & ", team.Select(x => x.Name))
                                            @if (team.Contains(game.CurrentPlayer))
                                            {
                                                <span class="active-dot"></span>
                                            }
                                        </h5>
                                        <div class="m-2">
                                            <Chip Context="info">
                                                <Label>Score</Label>
                                                <Badge>@team.Sum(x => x.Points)</Badge>
                                            </Chip>

                                            @if (team.Contains(game.BiddingPlayer))
                                            {
                                                <Chip Context="warning">
                                                    <Label>Bid</Label>
                                                    <Badge>@(game.BiddingPlayer.Bid.HasValue ? $"{game.BiddingPlayer.Bid}" : "?")</Badge>
                                                </Chip>
                                                <Chip>
                                                    <Label>Trump</Label>
                                                    <Badge>@(game.Trump.HasValue ? $"{game.Trump}" : "?")</Badge>
                                                </Chip>
                                            }
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (Model.Games == null)
        {
            await Model.FetchGamesAsync();
        }
    }
}
