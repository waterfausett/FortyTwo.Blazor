@page "/games"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@inject IGamesViewModel Model

<div>
    <h3>
        Games
        <button type="button" class="btn btn-link" @onclick="@(async () => await Model.FetchGamesAsync())">Update</button>
    </h3>

    <hr />

    <SpinnerOverlay Visible="Model.IsLoading">
        <div>
            @if (Model.Games?.Any() == true)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var game in Model.Games)
                        {
                            <tr>
                                <td>@game.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>

                @foreach (var game in Model.Games)
                {
                    // TODO: enhance this to maybe have teams listed separately and show their scores etc.
                    var title = string.Join(" vs ",
				        game.Players
					        .GroupBy(x => x.TeamId)
					        .Select(x => string.Join(" & ", x.Select(p => p.Name)))
					        .ToArray()
			        );

                    <div class="card">
                        <h5 class="card-header">@game.Name</h5>
                        <div class="card-body">
                            <h5 class="card-title">@title</h5>
                            <div class="row mb-2">
                                <div class="col-6">
                                    <p class="card-text"><b>Bid</b>: @(game.BiddingPlayer.Bid.HasValue ? $"{game.BiddingPlayer.Bid}" : "?")</p>
                                </div>
                                <div class="col-6">
                                    <p class="card-text"><b>Trump</b>: @(game.Trump.HasValue ? $"{game.Trump}" : "?")</p>
                                </div>
                            </div>
                            <a href="#" class="btn btn-primary">Go somewhere</a>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="p-3">No games yet.</p>
            }
        </div>
    </SpinnerOverlay>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (Model.Games == null)
        {
            await Model.FetchGamesAsync();
        }
    }
}
