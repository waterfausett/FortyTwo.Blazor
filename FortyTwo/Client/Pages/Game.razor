@page "/game/{gameId:guid}"
@attribute [Authorize]
@layout MainLayout
@using CurrieTechnologies.Razor.SweetAlert2
@using FortyTwo.Client.ViewModels
@inject IGameViewModel Model
@inject SweetAlertService Swal

<style>
    .game-wrapper {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: calc(100vh - 3.5rem - 18px);
    }

        .game-wrapper .player {
            min-height: 11rem;
            padding-bottom: 12px;
        }

        .game-wrapper .gameboard {
            flex-grow: 1;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }

            .game-wrapper .gameboard .player-team-tricks,
            .game-wrapper .gameboard .opponent-tricks {
                font-size: 5px;
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            .game-wrapper .gameboard .player-team-tricks {
                justify-content: flex-end;
            }
            .game-wrapper .gameboard .opponent-tricks {
                justify-content: flex-start;
            }

            .game-wrapper .gameboard .current-trick {
                flex: 1;
            }

        .game-wrapper .domino-container {
            font-size: min(.75rem, 1.42vw);
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: center;
            align-content: center;
        }
</style>

<SpinnerOverlay Visible="Model.IsLoading">
    @if (Model.Game == null || Model.Player == null)
    {
        <div class="alert alert-danger" role="alert">
            Failed to load game info :(
        </div>
    }
    else
    {
        <div class="game-wrapper">
            <div>
                <h5>
                    @Model.Game.Name
                    <button type="button" class="btn btn-link" @onclick="@(async () => await Model.FetchGameAsync())">Update</button>
                </h5>
            </div>
            <div>
                <div class="row">
                    @{
                        var teammate = Model.Game.Players.FirstOrDefault(x => x.Id != Model.Player.Id && x.TeamId == Model.Player.TeamId);
                        var opponents = Model.Game.Players.Where(x => x.TeamId != Model.Player.TeamId).ToList();
                    }
                    <RemotePlayer Player="opponents.ElementAtOrDefault(0)"></RemotePlayer>
                    <RemotePlayer Player="teammate"></RemotePlayer>
                    <RemotePlayer Player="opponents.ElementAtOrDefault(1)"></RemotePlayer>
                </div>
            </div>
            <div class="gameboard">
                @{
                    var teamTricks = Model.Game.Tricks.Where(x => x.TeamId == Model.Player.TeamId);
                    var opponentTricks = Model.Game.Tricks.Where(x => x.TeamId != Model.Player.TeamId);
                }
                <div class="opponent-tricks">
                    <div class="mb-1">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@opponentTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                    @foreach (var trick in opponentTricks)
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                </div>
                <div class="current-trick">
                    @foreach (var domino in Model.Game.CurrentTrick.Dominos)
                    {
                        <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                    }
                </div>
                <div class="player-team-tricks">
                    @foreach (var trick in teamTricks.Reverse())
                    {
                        <div class="row">
                            @foreach (var domino in trick.Dominos)
                            {
                                <Domino Instance="domino" Direction="DominoDirection.Vertical"></Domino>
                            }
                        </div>
                    }
                    <div class="mt-1 float-right">
                        <Chip Context="ContextualClass.Info"><Label>Points</Label><Badge>@teamTricks.Sum(x => x.Value)</Badge></Chip>
                    </div>
                </div>
            </div>
            <div class="player">
                <div class="row">
                    <div class="col-12">
                        <div class="domino-container">
                            @foreach (var domino in Model.Player.Dominos)
                            {
                                <Domino Instance="domino" Selectable="Model.Player.IsActive" OnSelected="async (domino) => await MakeMoveAsync(domino)"></Domino>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</SpinnerOverlay>

@code {
    [Parameter]
    public Guid GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model.GameId = GameId;

        if (Model.Game == null)
        {
            await Model.FetchGameAsync();
        }

        if (Model.Player == null)
        {
            await Model.FetchPlayerAsync();
        }
    }

    public async Task MakeMoveAsync(FortyTwo.Shared.Models.Domino domino)
    {
        bool successful;

        try
        {
            successful = await Model.MakeMoveAsync(domino);
        }
        catch (Exception ex)
        {
            successful = false;
            Console.Error.WriteLine(ex.Message);
        }

        if (!successful)
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Title = "Invalid move!",
                ConfirmButtonText = "Ok",
            });
        }
    }
}
