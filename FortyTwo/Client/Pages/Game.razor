@page "/game/{gameId:guid}"
@attribute [Authorize]
@layout MainLayout
@using FortyTwo.Client.ViewModels
@inject IGameViewModel Model

<SpinnerOverlay Visible="Model.IsLoading">
    <div class="game-wrapper">
        <div>
            <div class="row">
                <!-- TODO: fix this so that it's displaying players in the right order relative to the logged in user -->
                @foreach (var player in Model.Game.Players.Where(x => x.Id != UserId))
                {
                    <div class="col-4">
                        <h3>@player.Name</h3>
                        <span>@player.Dominos</span>
                    </div>
                }
            </div>
        </div>
        <div class="board">
            <h3>Get ready to play!</h3>
        </div>
        <div class="player-dominos">
            <div class="row">
                <div class="col-12">
                    <SpinnerOverlay Visible="Model.FetchingPlayer">
                        @if (Model.Player != null)
                        {
                            <div class="domino-container">
                                @foreach (var domino in Model.Player.Dominos)
                                {
                                    <Domino Top="domino.Top" Bottom="domino.Bottom"></Domino>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                Failed to load your info :(
                            </div>
                        }
                    </SpinnerOverlay>
                </div>
            </div>
        </div>
    </div>
</SpinnerOverlay>

@code {
    [Parameter]
    public Guid GameId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        UserId = authState.User.Claims.Single(c => c.Type == "sub").Value;

        Model.GameId = GameId;

        if (Model.Game == null)
        {
            await Model.FetchGameAsync();
        }

        if (Model.Player == null)
        {
            await Model.FetchPlayerAsync();
        }
    }
}
