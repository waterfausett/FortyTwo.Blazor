@inject IJSRuntime JS
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData">
                <Authorizing>
                    <div class="overlay-container">
                        <div class="spinner-overlay" style="height: 100vh;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <!--<RedirectToLogin />-->
                        {ShowLoginPrompt();}
                    }
                        else
                        {
                        <p>
                            You are not authorized to access
                            this resource.
                        </p>
                        }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    public async Task ShowLoginPrompt()
    {
        await JS.InvokeAsync<object>("Swal.fire", new
        {
            icon = "error",
            title = "Who goes there?!",
            allowOutsideClick = false,
            allowEscapeKey = false,
            confirmButtonText = "Log in now",
            showLoaderOnConfirm = true,
            showClass = new { popup = "swal2-show", backdrop = "swal-logout-bg" }
            /*
            preConfirm = new Func<bool>(() =>
            {
                //window.location.href = '/auth'
                //Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");

                return false;
            })
            */
        });
    }
}