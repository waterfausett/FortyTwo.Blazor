@using CurrieTechnologies.Razor.SweetAlert2
@using FortyTwo.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject SweetAlertService Swal
@inject NavigationManager Navigation
@inject IClientStore Store
@inject IUserService UserService
@inject HubConnection HubConnection
@implements IDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            @if (_initialized)
            {
                <AuthorizeRouteView RouteData="@routeData">
                    <Authorizing>
                        <SpinnerOverlay Visible="true" FullHeight="true"></SpinnerOverlay>
                    </Authorizing>
                    <NotAuthorized>
                        @if (!context.User.Identity.IsAuthenticated)
                        {
                            ShowLoginPrompt();
                        }
                        else
                        {
                            <!-- TODO: make this better -->
                            <p>
                                You are not authorized to access
                                this resource.
                            </p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            }
            else
            {
                <SpinnerOverlay Visible="true" FullHeight="true"></SpinnerOverlay>
            }
        </Found>
        <NotFound>
            <!-- TODO: make this use a different layout etc. -->
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private bool _initialized;

    protected override async Task OnInitializedAsync()
    {
        _initialized = true;

        await RegisterSignalRAsync();

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _ = HubConnection?.DisposeAsync();
    }

    private async Task RegisterSignalRAsync()
    {
        HubConnection.Closed += async (Exception ex) =>
        {
            Console.Error.WriteLine(ex.Message);

            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Error,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Disconnected",
                Width = "16rem"
            });
        };

        HubConnection.Reconnected += async (string connectionId) =>
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Success,
                Toast = true,
                ShowConfirmButton = false,
                Position = SweetAlertPosition.BottomRight,
                Timer = 1750,
                TimerProgressBar = true,
                ShowCloseButton = false,
                Title = "Reconnected",
                Width = "16rem"
            });
        };

        HubConnection.On<FortyTwo.Shared.DTO.Match>("OnMatchChanged", async (match) =>
        {
            Store.Matches.AddOrUpdate(match.Id, match, (_, __) => match);
            
            await UserService.SyncUsersAsync(match.Players.Select(x => x.Id).ToList());

            StateHasChanged();
        });

        await HubConnection.StartAsync();
    }

    public async void ShowLoginPrompt()
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Icon = SweetAlertIcon.Error,
            Title = "Who goes there?!",
            AllowOutsideClick = false,
            AllowEscapeKey = false,
            ConfirmButtonText = "I can explain&hellip;",
            ShowLoaderOnConfirm = true,
            ShowClass = new SweetAlertShowClass { Popup = "swal2-show", Backdrop = "swal-logout-bg" },
            PreConfirm = new PreConfirmCallback(async () =>
            {
                try
                {
                    Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
                    await Task.Delay(TimeSpan.FromSeconds(3));
                    await Swal.ShowValidationMessageAsync("good grief, this is taking a while&hellip;");
                    await Task.Delay(TimeSpan.FromSeconds(7));
                    await Swal.ShowValidationMessageAsync("");
                }
                catch
                {
                    await Swal.ShowValidationMessageAsync("well, something went wrong&hellip;");
                }

                return "false";
            })
        });
    }
}
