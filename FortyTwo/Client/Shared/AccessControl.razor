@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<!-- TODO: perhaps build out a user obj to inject vs grepping context.User -->

<ul class="navbar-nav my-2 my-lg-0 pr-2">
    <AuthorizeView>
        <Authorized>
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown"
                   aria-haspopup="true" aria-expanded="false">
                    <img src="@context.User.Claims.SingleOrDefault(c => c.Type == "picture")?.Value" class="img img-fluid rounded-circle" width="35" alt="default icon"
                         onerror="this.src='https://cdn.discordapp.com/embed/avatars/1.png';">
                    @(context.User.Claims.SingleOrDefault(c => c.Type == "nickname")?.Value ?? context.User.Identity.Name)
                </a>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" @onclick="BeginSignOut">Logout</a>
                </div>
            </li>
        </Authorized>
        <NotAuthorized>
            <li class="nav-item btn"><a href="authentication/login">Login</a></li>
        </NotAuthorized>
    </AuthorizeView>
</ul>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private IClientStore Store { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            AddLoggedInUserAsync(authState.User);
        }

        await base.OnInitializedAsync();
    }

    public void AddLoggedInUserAsync(System.Security.Claims.ClaimsPrincipal principal)
    {
        var loggedInUserId = principal?.Claims.SingleOrDefault(c => c.Type == "sub")?.Value;
        if (!string.IsNullOrWhiteSpace(loggedInUserId) && Store.Users.All(x => x.Id != loggedInUserId))
        {
            Store.Users.Add(new FortyTwo.Shared.DTO.User()
            {
                Id = loggedInUserId,
                Email = principal.Identity?.Name,
                Nickname = principal.Claims.SingleOrDefault(c => c.Type == "nickname")?.Value,
                Picture = principal.Claims.SingleOrDefault(c => c.Type == "picture")?.Value
            });
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}